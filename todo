
1) Add transport/viscosity data to the ig classes
2) Add ideal solid and ideal liquids
3) More multi-phase mixures
    - more refrigerants
    - O2 (needs substantial work)
    - H2, Ar, etc...
4) Add non-Span+Wagner multi-phase classes
5) Pedagogical materials
    - Introduction to Python and PYroMat
        - Accessing the command line
        - Basic concepts; variables and values
        - Program control (if, while, for)
        - Objects... "dot" notation
        - Intermediate types: tuples, lists, strings
        - Introduction to Numpy and arrays
        - Introduction to PYroMat
    - Intro to properties
        - Density
        - Pressure
        - Energy
        - Temperature
        - Specific heats
        - Viscosity
        - Diffusivity
    - Conservation of Energy, 1st law
        - Introduction to enthalpy
    - Entropy, 2nd Law
        - Introduction to a heat engine
        - Limits of a heat engine
        - Introduction to entropy
    - Properties of mixtures
        - A little kinetic theory
        - Ideal gas mixtures
    - Closed systems
        - Piston-cyclinder examples
    - Open systems
        - Heat exchanger (boiler/condenser)
        - Throttle valve
        - Compressor/pump
        - Turbine
        - Combustor
    - Chemical Reactions
    - Cycle analysis
        - Diesel, Otto cycles (closed)
        - Brayton cycle (open)
        - Rankine cycle (open)
        - Refrigerator/heat pump (open)
    - Compressible flow theory
        - The acoustic equation and speed of sound
        - Normal shock waves
        - Oblique shock waves
        - Laval nozzles
6) Do something meaningful with the "apps" module
    - Utility module
        - iteration functions
        - property differentiation
    - Advanced ideal substance module
        - dynamic ig mixture support
        - rudimentary phase change between ideal solids, liquids, and gases?
    - Viscous flow module
        - Poiseuille/couette Flow
        - Liquid film bearing
    - Component analysis module
        - Turbines
        - Compressors
        - Pumps
        - Boilers
        - Super-heaters
        - Condensers
        - Heat exchangers
        - Fans
        - Throttle/nozzle
    - Cycle analysis module
        - Rankine
        - Brayton
        - Otto
        - Diesel
        - Heat Pump
    - Compressible flow module
        - Normal shock
        - Oblique shocks
        - Laval nozzle
        - Mach rings
    - Reaction module (This is NOT a high priority)
        - WSR calculator
        - PFR calculator
7) Add more properties
    - speed of sound
    - gibbs free energy
    - helmholtz free energy
    - viral coefficients
    - joule-thompson coefficient
    - coefficient of thermal expansion
    - compressibility factor
    - bulk modulus
    - generic differentiation function
8) Add searchable species meta data (like common names)
9) Establish a standard test suite
    - Test properties against "known" values
    - Test inverse properties for self-consistency
    - Test unit conversion
    - Test array support
    - Test for reverse compatibility
10) Create a local GUI package
    - Runs with matplotlib
    - Separate package
    - Import/export data files
